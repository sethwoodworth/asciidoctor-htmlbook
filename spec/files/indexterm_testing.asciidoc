== Indexterm Tests

=== I. ONE TERM

==== Primary Only

One term total: one primary with quotation marks.((("metaclass")))

One term total: one primary without quotation marks.(((accessibility)))


=== II. TWO TERMS

==== Primary Only

Two terms total: one primary, one see.((("builder", see="aspect-oriented")))

Two terms total: one primary, one seealso.((("class method", seealso="namespace")))

Two terms total: one primary, one sortas.((("mixin", sortas="patterns")))

Two terms total: one primary, one id.((("Parnas's principles", id="dynamic")))

Two terms total: one range, one startref.(((range="endofrange", startref="dynamic")))

==== Primary and Secondary

Two terms total: one primary, one secondary.((("dynamically typed", "eigenclass")))


=== III. THREE TERMS

==== Primary Only

Three terms total: one primary, one id, one range.((("polymorphic", id="orthogonality", range="startofrange")))

Three terms total: one primary, one see, one seealso.((("mock object", see="destructor", seealso="factory method")))

==== Primary and Secondary

Three terms total: one primary, one secondary, one see.((("heap-based memory allocation", "immutable", see="instance method")))

Three terms total: one primary, one secondary, one seealso.((("inversion of control", "early binding", seealso="partial class")))

Three terms total: one primary, one secondary, one sortas.((("model–view–controller", "recursion", sortas="iterator")))

==== Primary, Secondary, and Tertiary

Three terms total: one primary, one secondary, one tertiary.((("reflection", "virtual class", "subtype")))

Three terms total: one primary, one secondary, one tertiary, no quotes.(((singleton, test-driven development, weak reference)))


=== IV. FOUR TERMS

==== Primary Only

Four terms total: one primary, one id, one range, one see.((("trait", id="slicing", range="startofrange", see="access control")))

Four terms total: one primary, one id, one range, one seealso.((("exception handling", id="deep copy", range="startofrange", seealso="hybrid")))

Four terms total: one primary, one id, one range, one sortas.((("dependency injection", id="instance", range="startofrange", sortas="uninitialized")))

Four terms total: one primary, one id, one see, one seealso.((("fragile base class", id="inheritance", see="mutator method", seealso="policy-based design")))

==== Primary and Secondary

Four terms total: one primary, one secondary, one id, one range.((("run-time type information", "viscosity", id="encapsulation", range="startofrange")))

Four terms total: one primary, one secondary, one see, one seealso.((("data-driven design", "superclass", see="typecasting", seealso="virtual inheritance")))

==== Primary, Secondary, and Tertiary

Four terms total: one primary, one secondary, one tertiary, one see.((("scope", "shadowed name", "function", see="late binding")))

Four terms total: one primary, one secondary, one tertiary, one seealso.((("initialize", "array", "compiler", seealso="subroutine")))

Four terms total: one primary, one secondary, one tertiary, one sortas.((("Boolean", "stack", "paradigm", sortas="enumerable")))



=== V. FIVE TERMS

==== Primary Only

Five terms total: one primary, one id, one range, one see, one seealso.((("identifier", id="mapping", range="startofrange", see="overload", seealso="parse")))

==== Primary and Secondary

Five terms total: one primary, one secondary, one id, one range, one see.((("prototype", "token", id="syntax", range="startofrange", see="binary")))

Five terms total: one primary, one secondary, one id, one range, one seealso.((("global", "conditional", id="collection", range="startofrange", seealso="alias")))

Five terms total: one primary, one secondary, one id, one range, one sortas.((("encapsulated", "operation", id="semantics", range="startofrange", sortas="parameter")))

Five terms total: one primary, one secondary, one id, one see, one seealso.((("void pointer", "abstraction", id="constant", see="arithmetic operator", seealso="base type")))

==== Primary, Secondary, and Tertiary

Five terms total: one primary, one secondary, one tertiary, one id, one range.((("continuous", "deprecated", "finalization", id="little-endian", range="startofrange")))

Five terms total: one primary, one secondary, one tertiary, one see, one seealso.((("locale", "parallel", "scheme", see="ternary", seealso="exception")))


=== VI. SIX TERMS

==== Primary and Secondary

Six terms total: one primary, one secondary, one id, one range, one see, one seealso.((("virtual", "while loop", id="retro", range="startofrange", see="top-level class", seealso="unary")))

==== Primary, Secondary, and Tertiary

Six terms total: one primary, one secondary, one tertiary, one id, one range, one see.((("static type", "precedence", "overriding", id="lightweight", range="startofrange", see="infinite")))

Six terms total: one primary, one secondary, one tertiary, one id, one range, one seealso.((("hash function", "encapsulation", "condition", id="aggregation", range="startofrange", seealso="boundary")))

Six terms total: one primary, one secondary, one tertiary, one id, one range, one sortas.((("bytecode", "classpath", "import", id="datagram", range="startofrange", sortas="method")))


=== VII. SEVEN TERMS

Seven terms total: one primary, one secondary, one tertiary, one id, one range, one see, one seealso.((("copy constructor", "public", "relational", id="cascaded", range="startofrange", see="inline", seealso="private")))

[[sortas_tests]]
=== VIII NEXT-GEN SORTAS TESTING

Primary, secondary, and tertiary sortas((("1", "2", "3", primary-sortas="one", secondary-sortas="two", tertiary-sortas="three")))

Plain sortas should be ignored if there is primary-sortas((("1", sortas="ignoreme", primary-sortas="one")))

Plain sortas should be ignored if there is secondary-sortas((("1", "2", secondary-sortas="two", sortas="ignoreme2")))

Plain sortas should be ignored if there is tertiary-sortas((("1", "2", "3",  tertiary-sortas="three", sortas="ignoreme3")))

[[text-term-hybrid]]
=== VIII. TEXT-TERM HYBRID

((Ruby)) is my favorite programming language.